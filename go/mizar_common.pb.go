// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: mizar_common.proto

package mizar

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 錯誤代碼
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_SUCCESS        ErrorCode = 0  // 成功
	ErrorCode_ERROR_CODE_API_NOT_READY  ErrorCode = 1  // API 未就緒（連線失敗）
	ErrorCode_ERROR_CODE_RATE_LIMIT     ErrorCode = 2  // 流量限制
	ErrorCode_ERROR_CODE_INTERNAL_ERROR ErrorCode = 99 // 內部錯誤（未預期的錯誤）
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ERROR_CODE_SUCCESS",
		1:  "ERROR_CODE_API_NOT_READY",
		2:  "ERROR_CODE_RATE_LIMIT",
		99: "ERROR_CODE_INTERNAL_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_SUCCESS":        0,
		"ERROR_CODE_API_NOT_READY":  1,
		"ERROR_CODE_RATE_LIMIT":     2,
		"ERROR_CODE_INTERNAL_ERROR": 99,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{0}
}

// 買賣方向
type Action int32

const (
	Action_ACTION_UNSPECIFIED Action = 0 // 未定義
	Action_ACTION_BUY         Action = 1 // 買
	Action_ACTION_SELL        Action = 2 // 賣
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_BUY",
		2: "ACTION_SELL",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_BUY":         1,
		"ACTION_SELL":        2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[1].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[1]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{1}
}

// 價格類型
type PriceType int32

const (
	PriceType_PRICE_TYPE_UNSPECIFIED PriceType = 0 // 未定義
	PriceType_PRICE_TYPE_LMT         PriceType = 1 // 限價
	PriceType_PRICE_TYPE_MKT         PriceType = 2 // 市價
	PriceType_PRICE_TYPE_MKP         PriceType = 3 // 範圍市價
)

// Enum value maps for PriceType.
var (
	PriceType_name = map[int32]string{
		0: "PRICE_TYPE_UNSPECIFIED",
		1: "PRICE_TYPE_LMT",
		2: "PRICE_TYPE_MKT",
		3: "PRICE_TYPE_MKP",
	}
	PriceType_value = map[string]int32{
		"PRICE_TYPE_UNSPECIFIED": 0,
		"PRICE_TYPE_LMT":         1,
		"PRICE_TYPE_MKT":         2,
		"PRICE_TYPE_MKP":         3,
	}
)

func (x PriceType) Enum() *PriceType {
	p := new(PriceType)
	*p = x
	return p
}

func (x PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[2].Descriptor()
}

func (PriceType) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[2]
}

func (x PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceType.Descriptor instead.
func (PriceType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{2}
}

// 委託類別
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0 // 未定義
	OrderType_ORDER_TYPE_ROD         OrderType = 1 // ROD（當日有效）
	OrderType_ORDER_TYPE_IOC         OrderType = 2 // IOC（立即成交否則取消）
	OrderType_ORDER_TYPE_FOK         OrderType = 3 // FOK（全部成交否則取消）
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_ROD",
		2: "ORDER_TYPE_IOC",
		3: "ORDER_TYPE_FOK",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_ROD":         1,
		"ORDER_TYPE_IOC":         2,
		"ORDER_TYPE_FOK":         3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[3].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[3]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{3}
}

// 委託性質
type OcType int32

const (
	OcType_OC_TYPE_UNSPECIFIED OcType = 0 // 未定義
	OcType_OC_TYPE_AUTO        OcType = 1 // 自動
	OcType_OC_TYPE_NEW         OcType = 2 // 新倉
	OcType_OC_TYPE_COVER       OcType = 3 // 平倉
	OcType_OC_TYPE_DAY_TRADE   OcType = 4 // 當沖
)

// Enum value maps for OcType.
var (
	OcType_name = map[int32]string{
		0: "OC_TYPE_UNSPECIFIED",
		1: "OC_TYPE_AUTO",
		2: "OC_TYPE_NEW",
		3: "OC_TYPE_COVER",
		4: "OC_TYPE_DAY_TRADE",
	}
	OcType_value = map[string]int32{
		"OC_TYPE_UNSPECIFIED": 0,
		"OC_TYPE_AUTO":        1,
		"OC_TYPE_NEW":         2,
		"OC_TYPE_COVER":       3,
		"OC_TYPE_DAY_TRADE":   4,
	}
)

func (x OcType) Enum() *OcType {
	p := new(OcType)
	*p = x
	return p
}

func (x OcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OcType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[4].Descriptor()
}

func (OcType) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[4]
}

func (x OcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OcType.Descriptor instead.
func (OcType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{4}
}

// 委託狀態
type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED    OrderStatus = 0 // 未定義
	OrderStatus_ORDER_STATUS_CANCELLED      OrderStatus = 1 // 已刪除
	OrderStatus_ORDER_STATUS_FILLED         OrderStatus = 2 // 完全成交
	OrderStatus_ORDER_STATUS_PART_FILLED    OrderStatus = 3 // 部分成交
	OrderStatus_ORDER_STATUS_FAILED         OrderStatus = 4 // 失敗
	OrderStatus_ORDER_STATUS_PENDING_SUBMIT OrderStatus = 5 // 傳送中
	OrderStatus_ORDER_STATUS_PRE_SUBMITTED  OrderStatus = 6 // 預約單
	OrderStatus_ORDER_STATUS_SUBMITTED      OrderStatus = 7 // 傳送成功
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_CANCELLED",
		2: "ORDER_STATUS_FILLED",
		3: "ORDER_STATUS_PART_FILLED",
		4: "ORDER_STATUS_FAILED",
		5: "ORDER_STATUS_PENDING_SUBMIT",
		6: "ORDER_STATUS_PRE_SUBMITTED",
		7: "ORDER_STATUS_SUBMITTED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":    0,
		"ORDER_STATUS_CANCELLED":      1,
		"ORDER_STATUS_FILLED":         2,
		"ORDER_STATUS_PART_FILLED":    3,
		"ORDER_STATUS_FAILED":         4,
		"ORDER_STATUS_PENDING_SUBMIT": 5,
		"ORDER_STATUS_PRE_SUBMITTED":  6,
		"ORDER_STATUS_SUBMITTED":      7,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[5].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[5]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{5}
}

// 內外盤別
type TickType int32

const (
	TickType_TICK_TYPE_UNKNOWN TickType = 0 // 無法判定
	TickType_TICK_TYPE_OUTSIDE TickType = 1 // 外盤
	TickType_TICK_TYPE_INSIDE  TickType = 2 // 內盤
)

// Enum value maps for TickType.
var (
	TickType_name = map[int32]string{
		0: "TICK_TYPE_UNKNOWN",
		1: "TICK_TYPE_OUTSIDE",
		2: "TICK_TYPE_INSIDE",
	}
	TickType_value = map[string]int32{
		"TICK_TYPE_UNKNOWN": 0,
		"TICK_TYPE_OUTSIDE": 1,
		"TICK_TYPE_INSIDE":  2,
	}
)

func (x TickType) Enum() *TickType {
	p := new(TickType)
	*p = x
	return p
}

func (x TickType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[6].Descriptor()
}

func (TickType) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[6]
}

func (x TickType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TickType.Descriptor instead.
func (TickType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{6}
}

// 漲跌註記
type ChangeType int32

const (
	ChangeType_CHANGE_TYPE_UNKNOWN    ChangeType = 0 // 未知
	ChangeType_CHANGE_TYPE_LIMIT_UP   ChangeType = 1 // 漲停
	ChangeType_CHANGE_TYPE_UP         ChangeType = 2 // 漲
	ChangeType_CHANGE_TYPE_FLAT       ChangeType = 3 // 平盤
	ChangeType_CHANGE_TYPE_DOWN       ChangeType = 4 // 跌
	ChangeType_CHANGE_TYPE_LIMIT_DOWN ChangeType = 5 // 跌停
)

// Enum value maps for ChangeType.
var (
	ChangeType_name = map[int32]string{
		0: "CHANGE_TYPE_UNKNOWN",
		1: "CHANGE_TYPE_LIMIT_UP",
		2: "CHANGE_TYPE_UP",
		3: "CHANGE_TYPE_FLAT",
		4: "CHANGE_TYPE_DOWN",
		5: "CHANGE_TYPE_LIMIT_DOWN",
	}
	ChangeType_value = map[string]int32{
		"CHANGE_TYPE_UNKNOWN":    0,
		"CHANGE_TYPE_LIMIT_UP":   1,
		"CHANGE_TYPE_UP":         2,
		"CHANGE_TYPE_FLAT":       3,
		"CHANGE_TYPE_DOWN":       4,
		"CHANGE_TYPE_LIMIT_DOWN": 5,
	}
)

func (x ChangeType) Enum() *ChangeType {
	p := new(ChangeType)
	*p = x
	return p
}

func (x ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[7].Descriptor()
}

func (ChangeType) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[7]
}

func (x ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeType.Descriptor instead.
func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{7}
}

// 試撮狀態
type SimTradeType int32

const (
	SimTradeType_SIM_TRADE_TYPE_NORMAL     SimTradeType = 0 // 正常交易
	SimTradeType_SIM_TRADE_TYPE_SIMULATION SimTradeType = 1 // 試撮
)

// Enum value maps for SimTradeType.
var (
	SimTradeType_name = map[int32]string{
		0: "SIM_TRADE_TYPE_NORMAL",
		1: "SIM_TRADE_TYPE_SIMULATION",
	}
	SimTradeType_value = map[string]int32{
		"SIM_TRADE_TYPE_NORMAL":     0,
		"SIM_TRADE_TYPE_SIMULATION": 1,
	}
)

func (x SimTradeType) Enum() *SimTradeType {
	p := new(SimTradeType)
	*p = x
	return p
}

func (x SimTradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimTradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_common_proto_enumTypes[8].Descriptor()
}

func (SimTradeType) Type() protoreflect.EnumType {
	return &file_mizar_common_proto_enumTypes[8]
}

func (x SimTradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimTradeType.Descriptor instead.
func (SimTradeType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{8}
}

// 成交資訊
type Deal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seq           string                 `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`            // 成交序號
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`      // 成交價
	Quantity      int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"` // 成交數量
	Ts            int64                  `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`             // 成交時間戳（納秒）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deal) Reset() {
	*x = Deal{}
	mi := &file_mizar_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal) ProtoMessage() {}

func (x *Deal) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal.ProtoReflect.Descriptor instead.
func (*Deal) Descriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{0}
}

func (x *Deal) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *Deal) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Deal) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Deal) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

// 委託狀態資訊
type OrderStatusInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                // 關聯Order物件編碼
	Status         OrderStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=mizar.common.OrderStatus" json:"status,omitempty"`         // 委託狀態
	StatusCode     string                 `protobuf:"bytes,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`              // 狀態碼
	OrderDatetime  int64                  `protobuf:"varint,4,opt,name=order_datetime,json=orderDatetime,proto3" json:"order_datetime,omitempty"`    // 委託時間（納秒時間戳）
	OrderQuantity  int64                  `protobuf:"varint,5,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`    // 委託數量
	ModifiedPrice  float64                `protobuf:"fixed64,6,opt,name=modified_price,json=modifiedPrice,proto3" json:"modified_price,omitempty"`   // 改價金額
	CancelQuantity int64                  `protobuf:"varint,7,opt,name=cancel_quantity,json=cancelQuantity,proto3" json:"cancel_quantity,omitempty"` // 取消委託數量
	Deals          []*Deal                `protobuf:"bytes,8,rep,name=deals,proto3" json:"deals,omitempty"`                                          // 成交資訊
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OrderStatusInfo) Reset() {
	*x = OrderStatusInfo{}
	mi := &file_mizar_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusInfo) ProtoMessage() {}

func (x *OrderStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusInfo.ProtoReflect.Descriptor instead.
func (*OrderStatusInfo) Descriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{1}
}

func (x *OrderStatusInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderStatusInfo) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *OrderStatusInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *OrderStatusInfo) GetOrderDatetime() int64 {
	if x != nil {
		return x.OrderDatetime
	}
	return 0
}

func (x *OrderStatusInfo) GetOrderQuantity() int64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *OrderStatusInfo) GetModifiedPrice() float64 {
	if x != nil {
		return x.ModifiedPrice
	}
	return 0
}

func (x *OrderStatusInfo) GetCancelQuantity() int64 {
	if x != nil {
		return x.CancelQuantity
	}
	return 0
}

func (x *OrderStatusInfo) GetDeals() []*Deal {
	if x != nil {
		return x.Deals
	}
	return nil
}

// 委託資訊
type Order struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        Action                 `protobuf:"varint,1,opt,name=action,proto3,enum=mizar.common.Action" json:"action,omitempty"`                            // 買賣方向
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`                                                      // 委託價格
	Quantity      int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                 // 委託數量
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                                                              // 委託編號
	Seqno         string                 `protobuf:"bytes,5,opt,name=seqno,proto3" json:"seqno,omitempty"`                                                        // 平台單號
	Ordno         string                 `protobuf:"bytes,6,opt,name=ordno,proto3" json:"ordno,omitempty"`                                                        // 委託序號
	Account       string                 `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`                                                    // 帳號
	CustomField   string                 `protobuf:"bytes,8,opt,name=custom_field,json=customField,proto3" json:"custom_field,omitempty"`                         // 自訂欄位
	PriceType     PriceType              `protobuf:"varint,9,opt,name=price_type,json=priceType,proto3,enum=mizar.common.PriceType" json:"price_type,omitempty"`  // 價格類型
	OrderType     OrderType              `protobuf:"varint,10,opt,name=order_type,json=orderType,proto3,enum=mizar.common.OrderType" json:"order_type,omitempty"` // 委託類別
	DaytradeShort bool                   `protobuf:"varint,11,opt,name=daytrade_short,json=daytradeShort,proto3" json:"daytrade_short,omitempty"`                 // 當沖賣空（證券用）
	OcType        OcType                 `protobuf:"varint,12,opt,name=oc_type,json=ocType,proto3,enum=mizar.common.OcType" json:"oc_type,omitempty"`             // 委託性質（期貨用）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_mizar_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{2}
}

func (x *Order) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetSeqno() string {
	if x != nil {
		return x.Seqno
	}
	return ""
}

func (x *Order) GetOrdno() string {
	if x != nil {
		return x.Ordno
	}
	return ""
}

func (x *Order) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Order) GetCustomField() string {
	if x != nil {
		return x.CustomField
	}
	return ""
}

func (x *Order) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

func (x *Order) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetDaytradeShort() bool {
	if x != nil {
		return x.DaytradeShort
	}
	return false
}

func (x *Order) GetOcType() OcType {
	if x != nil {
		return x.OcType
	}
	return OcType_OC_TYPE_UNSPECIFIED
}

// 商品資訊
type Contract struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Code           string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                            // 商品代碼
	Symbol         string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                        // 商品符號
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            // 商品名稱
	Category       string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`                                    // 商品類別
	Unit           int64                  `protobuf:"varint,5,opt,name=unit,proto3" json:"unit,omitempty"`                                           // 交易單位
	LimitUp        float64                `protobuf:"fixed64,6,opt,name=limit_up,json=limitUp,proto3" json:"limit_up,omitempty"`                     // 漲停價
	LimitDown      float64                `protobuf:"fixed64,7,opt,name=limit_down,json=limitDown,proto3" json:"limit_down,omitempty"`               // 跌停價
	Reference      float64                `protobuf:"fixed64,8,opt,name=reference,proto3" json:"reference,omitempty"`                                // 參考價
	UpdateDate     string                 `protobuf:"bytes,9,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`              // 更新日期
	DeliveryMonth  string                 `protobuf:"bytes,10,opt,name=delivery_month,json=deliveryMonth,proto3" json:"delivery_month,omitempty"`    // 到期月份（期貨用）
	DeliveryDate   string                 `protobuf:"bytes,11,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`       // 到期日期（期貨用）
	UnderlyingKind string                 `protobuf:"bytes,12,opt,name=underlying_kind,json=underlyingKind,proto3" json:"underlying_kind,omitempty"` // 標的物種類（期貨用）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Contract) Reset() {
	*x = Contract{}
	mi := &file_mizar_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{3}
}

func (x *Contract) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Contract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Contract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contract) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Contract) GetUnit() int64 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *Contract) GetLimitUp() float64 {
	if x != nil {
		return x.LimitUp
	}
	return 0
}

func (x *Contract) GetLimitDown() float64 {
	if x != nil {
		return x.LimitDown
	}
	return 0
}

func (x *Contract) GetReference() float64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *Contract) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *Contract) GetDeliveryMonth() string {
	if x != nil {
		return x.DeliveryMonth
	}
	return ""
}

func (x *Contract) GetDeliveryDate() string {
	if x != nil {
		return x.DeliveryDate
	}
	return ""
}

func (x *Contract) GetUnderlyingKind() string {
	if x != nil {
		return x.UnderlyingKind
	}
	return ""
}

// 委託交易資訊
type Trade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Contract      *Contract              `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"` // 商品資訊
	Order         *Order                 `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`       // 委託資訊
	Status        *OrderStatusInfo       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`     // 委託狀態
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_mizar_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_mizar_common_proto_rawDescGZIP(), []int{4}
}

func (x *Trade) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Trade) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Trade) GetStatus() *OrderStatusInfo {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_mizar_common_proto protoreflect.FileDescriptor

const file_mizar_common_proto_rawDesc = "" +
	"\n" +
	"\x12mizar_common.proto\x12\fmizar.common\"Z\n" +
	"\x04Deal\x12\x10\n" +
	"\x03seq\x18\x01 \x01(\tR\x03seq\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x03R\bquantity\x12\x0e\n" +
	"\x02ts\x18\x04 \x01(\x03R\x02ts\"\xbd\x02\n" +
	"\x0fOrderStatusInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.mizar.common.OrderStatusR\x06status\x12\x1f\n" +
	"\vstatus_code\x18\x03 \x01(\tR\n" +
	"statusCode\x12%\n" +
	"\x0eorder_datetime\x18\x04 \x01(\x03R\rorderDatetime\x12%\n" +
	"\x0eorder_quantity\x18\x05 \x01(\x03R\rorderQuantity\x12%\n" +
	"\x0emodified_price\x18\x06 \x01(\x01R\rmodifiedPrice\x12'\n" +
	"\x0fcancel_quantity\x18\a \x01(\x03R\x0ecancelQuantity\x12(\n" +
	"\x05deals\x18\b \x03(\v2\x12.mizar.common.DealR\x05deals\"\xa6\x03\n" +
	"\x05Order\x12,\n" +
	"\x06action\x18\x01 \x01(\x0e2\x14.mizar.common.ActionR\x06action\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x03R\bquantity\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12\x14\n" +
	"\x05seqno\x18\x05 \x01(\tR\x05seqno\x12\x14\n" +
	"\x05ordno\x18\x06 \x01(\tR\x05ordno\x12\x18\n" +
	"\aaccount\x18\a \x01(\tR\aaccount\x12!\n" +
	"\fcustom_field\x18\b \x01(\tR\vcustomField\x126\n" +
	"\n" +
	"price_type\x18\t \x01(\x0e2\x17.mizar.common.PriceTypeR\tpriceType\x126\n" +
	"\n" +
	"order_type\x18\n" +
	" \x01(\x0e2\x17.mizar.common.OrderTypeR\torderType\x12%\n" +
	"\x0edaytrade_short\x18\v \x01(\bR\rdaytradeShort\x12-\n" +
	"\aoc_type\x18\f \x01(\x0e2\x14.mizar.common.OcTypeR\x06ocType\"\xe8\x02\n" +
	"\bContract\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\x03R\x04unit\x12\x19\n" +
	"\blimit_up\x18\x06 \x01(\x01R\alimitUp\x12\x1d\n" +
	"\n" +
	"limit_down\x18\a \x01(\x01R\tlimitDown\x12\x1c\n" +
	"\treference\x18\b \x01(\x01R\treference\x12\x1f\n" +
	"\vupdate_date\x18\t \x01(\tR\n" +
	"updateDate\x12%\n" +
	"\x0edelivery_month\x18\n" +
	" \x01(\tR\rdeliveryMonth\x12#\n" +
	"\rdelivery_date\x18\v \x01(\tR\fdeliveryDate\x12'\n" +
	"\x0funderlying_kind\x18\f \x01(\tR\x0eunderlyingKind\"\x9d\x01\n" +
	"\x05Trade\x122\n" +
	"\bcontract\x18\x01 \x01(\v2\x16.mizar.common.ContractR\bcontract\x12)\n" +
	"\x05order\x18\x02 \x01(\v2\x13.mizar.common.OrderR\x05order\x125\n" +
	"\x06status\x18\x03 \x01(\v2\x1d.mizar.common.OrderStatusInfoR\x06status*{\n" +
	"\tErrorCode\x12\x16\n" +
	"\x12ERROR_CODE_SUCCESS\x10\x00\x12\x1c\n" +
	"\x18ERROR_CODE_API_NOT_READY\x10\x01\x12\x19\n" +
	"\x15ERROR_CODE_RATE_LIMIT\x10\x02\x12\x1d\n" +
	"\x19ERROR_CODE_INTERNAL_ERROR\x10c*A\n" +
	"\x06Action\x12\x16\n" +
	"\x12ACTION_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"ACTION_BUY\x10\x01\x12\x0f\n" +
	"\vACTION_SELL\x10\x02*c\n" +
	"\tPriceType\x12\x1a\n" +
	"\x16PRICE_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0ePRICE_TYPE_LMT\x10\x01\x12\x12\n" +
	"\x0ePRICE_TYPE_MKT\x10\x02\x12\x12\n" +
	"\x0ePRICE_TYPE_MKP\x10\x03*c\n" +
	"\tOrderType\x12\x1a\n" +
	"\x16ORDER_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eORDER_TYPE_ROD\x10\x01\x12\x12\n" +
	"\x0eORDER_TYPE_IOC\x10\x02\x12\x12\n" +
	"\x0eORDER_TYPE_FOK\x10\x03*n\n" +
	"\x06OcType\x12\x17\n" +
	"\x13OC_TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fOC_TYPE_AUTO\x10\x01\x12\x0f\n" +
	"\vOC_TYPE_NEW\x10\x02\x12\x11\n" +
	"\rOC_TYPE_COVER\x10\x03\x12\x15\n" +
	"\x11OC_TYPE_DAY_TRADE\x10\x04*\xf4\x01\n" +
	"\vOrderStatus\x12\x1c\n" +
	"\x18ORDER_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16ORDER_STATUS_CANCELLED\x10\x01\x12\x17\n" +
	"\x13ORDER_STATUS_FILLED\x10\x02\x12\x1c\n" +
	"\x18ORDER_STATUS_PART_FILLED\x10\x03\x12\x17\n" +
	"\x13ORDER_STATUS_FAILED\x10\x04\x12\x1f\n" +
	"\x1bORDER_STATUS_PENDING_SUBMIT\x10\x05\x12\x1e\n" +
	"\x1aORDER_STATUS_PRE_SUBMITTED\x10\x06\x12\x1a\n" +
	"\x16ORDER_STATUS_SUBMITTED\x10\a*N\n" +
	"\bTickType\x12\x15\n" +
	"\x11TICK_TYPE_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11TICK_TYPE_OUTSIDE\x10\x01\x12\x14\n" +
	"\x10TICK_TYPE_INSIDE\x10\x02*\x9b\x01\n" +
	"\n" +
	"ChangeType\x12\x17\n" +
	"\x13CHANGE_TYPE_UNKNOWN\x10\x00\x12\x18\n" +
	"\x14CHANGE_TYPE_LIMIT_UP\x10\x01\x12\x12\n" +
	"\x0eCHANGE_TYPE_UP\x10\x02\x12\x14\n" +
	"\x10CHANGE_TYPE_FLAT\x10\x03\x12\x14\n" +
	"\x10CHANGE_TYPE_DOWN\x10\x04\x12\x1a\n" +
	"\x16CHANGE_TYPE_LIMIT_DOWN\x10\x05*H\n" +
	"\fSimTradeType\x12\x19\n" +
	"\x15SIM_TRADE_TYPE_NORMAL\x10\x00\x12\x1d\n" +
	"\x19SIM_TRADE_TYPE_SIMULATION\x10\x01B*Z(github.com/mizar/mizar-proto/proto/mizarb\x06proto3"

var (
	file_mizar_common_proto_rawDescOnce sync.Once
	file_mizar_common_proto_rawDescData []byte
)

func file_mizar_common_proto_rawDescGZIP() []byte {
	file_mizar_common_proto_rawDescOnce.Do(func() {
		file_mizar_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mizar_common_proto_rawDesc), len(file_mizar_common_proto_rawDesc)))
	})
	return file_mizar_common_proto_rawDescData
}

var file_mizar_common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_mizar_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mizar_common_proto_goTypes = []any{
	(ErrorCode)(0),          // 0: mizar.common.ErrorCode
	(Action)(0),             // 1: mizar.common.Action
	(PriceType)(0),          // 2: mizar.common.PriceType
	(OrderType)(0),          // 3: mizar.common.OrderType
	(OcType)(0),             // 4: mizar.common.OcType
	(OrderStatus)(0),        // 5: mizar.common.OrderStatus
	(TickType)(0),           // 6: mizar.common.TickType
	(ChangeType)(0),         // 7: mizar.common.ChangeType
	(SimTradeType)(0),       // 8: mizar.common.SimTradeType
	(*Deal)(nil),            // 9: mizar.common.Deal
	(*OrderStatusInfo)(nil), // 10: mizar.common.OrderStatusInfo
	(*Order)(nil),           // 11: mizar.common.Order
	(*Contract)(nil),        // 12: mizar.common.Contract
	(*Trade)(nil),           // 13: mizar.common.Trade
}
var file_mizar_common_proto_depIdxs = []int32{
	5,  // 0: mizar.common.OrderStatusInfo.status:type_name -> mizar.common.OrderStatus
	9,  // 1: mizar.common.OrderStatusInfo.deals:type_name -> mizar.common.Deal
	1,  // 2: mizar.common.Order.action:type_name -> mizar.common.Action
	2,  // 3: mizar.common.Order.price_type:type_name -> mizar.common.PriceType
	3,  // 4: mizar.common.Order.order_type:type_name -> mizar.common.OrderType
	4,  // 5: mizar.common.Order.oc_type:type_name -> mizar.common.OcType
	12, // 6: mizar.common.Trade.contract:type_name -> mizar.common.Contract
	11, // 7: mizar.common.Trade.order:type_name -> mizar.common.Order
	10, // 8: mizar.common.Trade.status:type_name -> mizar.common.OrderStatusInfo
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_mizar_common_proto_init() }
func file_mizar_common_proto_init() {
	if File_mizar_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mizar_common_proto_rawDesc), len(file_mizar_common_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mizar_common_proto_goTypes,
		DependencyIndexes: file_mizar_common_proto_depIdxs,
		EnumInfos:         file_mizar_common_proto_enumTypes,
		MessageInfos:      file_mizar_common_proto_msgTypes,
	}.Build()
	File_mizar_common_proto = out.File
	file_mizar_common_proto_goTypes = nil
	file_mizar_common_proto_depIdxs = nil
}
