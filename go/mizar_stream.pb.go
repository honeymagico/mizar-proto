// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: mizar_stream.proto

package mizar

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 事件類型
type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0 // 未定義
	EventType_EVENT_TYPE_UP          EventType = 1 // 系統上線
	EventType_EVENT_TYPE_DOWN        EventType = 2 // 系統下線
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_UP",
		2: "EVENT_TYPE_DOWN",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_UP":          1,
		"EVENT_TYPE_DOWN":        2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_mizar_stream_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_mizar_stream_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{0}
}

// 系統事件資料
type SystemEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EventType        EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=mizar.stream.EventType" json:"event_type,omitempty"` // 事件類型（UP/DOWN）
	EventName        string                 `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`                              // 事件名稱
	EventDescription string                 `protobuf:"bytes,3,opt,name=event_description,json=eventDescription,proto3" json:"event_description,omitempty"`         // 事件說明
	Timestamp        int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                              // 事件發生時間（納秒時間戳）
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SystemEvent) Reset() {
	*x = SystemEvent{}
	mi := &file_mizar_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemEvent) ProtoMessage() {}

func (x *SystemEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemEvent.ProtoReflect.Descriptor instead.
func (*SystemEvent) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{0}
}

func (x *SystemEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *SystemEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *SystemEvent) GetEventDescription() string {
	if x != nil {
		return x.EventDescription
	}
	return ""
}

func (x *SystemEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 操作資訊
type Operation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpType        string                 `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"` // 操作類型（New: 新單, Cancel: 刪單, UpdatePrice: 改價, UpdateQty: 改量）
	OpCode        string                 `protobuf:"bytes,2,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"` // 操作結果代碼（00: 成功, others: 失敗）
	OpMsg         string                 `protobuf:"bytes,3,opt,name=op_msg,json=opMsg,proto3" json:"op_msg,omitempty"`    // 錯誤訊息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_mizar_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Operation) GetOpType() string {
	if x != nil {
		return x.OpType
	}
	return ""
}

func (x *Operation) GetOpCode() string {
	if x != nil {
		return x.OpCode
	}
	return ""
}

func (x *Operation) GetOpMsg() string {
	if x != nil {
		return x.OpMsg
	}
	return ""
}

// 期貨委託回報資料（完整格式）
type FutureOrderReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operation     *Operation             `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"` // 操作資訊
	Trade         *Trade                 `protobuf:"bytes,2,opt,name=trade,proto3" json:"trade,omitempty"`         // 完整的委託交易資訊
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FutureOrderReport) Reset() {
	*x = FutureOrderReport{}
	mi := &file_mizar_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureOrderReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureOrderReport) ProtoMessage() {}

func (x *FutureOrderReport) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureOrderReport.ProtoReflect.Descriptor instead.
func (*FutureOrderReport) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{2}
}

func (x *FutureOrderReport) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *FutureOrderReport) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

// 期貨成交回報資料（完整格式）
type FutureDealReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradeId       string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                    // 與委託回報id相同
	Seqno         string                 `protobuf:"bytes,2,opt,name=seqno,proto3" json:"seqno,omitempty"`                                       // 平台單號
	Ordno         string                 `protobuf:"bytes,3,opt,name=ordno,proto3" json:"ordno,omitempty"`                                       // 委託單號（前五碼為同委託回報委託單號，後三碼為同筆委託成交交易序號）
	ExchangeSeq   string                 `protobuf:"bytes,4,opt,name=exchange_seq,json=exchangeSeq,proto3" json:"exchange_seq,omitempty"`        // 回報序號
	BrokerId      string                 `protobuf:"bytes,5,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`                 // 分行代碼
	AccountId     string                 `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`              // 帳號
	Action        string                 `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`                                     // 買賣別
	Code          string                 `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`                                         // 商品代碼
	Price         float64                `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`                                     // 成交價
	Quantity      int64                  `protobuf:"varint,10,opt,name=quantity,proto3" json:"quantity,omitempty"`                               // 成交量
	Subaccount    string                 `protobuf:"bytes,11,opt,name=subaccount,proto3" json:"subaccount,omitempty"`                            // 子帳號
	SecurityType  string                 `protobuf:"bytes,12,opt,name=security_type,json=securityType,proto3" json:"security_type,omitempty"`    // 商品類別
	DeliveryMonth string                 `protobuf:"bytes,13,opt,name=delivery_month,json=deliveryMonth,proto3" json:"delivery_month,omitempty"` // 交割月份
	StrikePrice   float64                `protobuf:"fixed64,14,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`     // 履約價
	OptionRight   string                 `protobuf:"bytes,15,opt,name=option_right,json=optionRight,proto3" json:"option_right,omitempty"`       // 期權權利（Future, OptionCall, OptionPut）
	MarketType    string                 `protobuf:"bytes,16,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`          // 市場別（Day, Night）
	Combo         bool                   `protobuf:"varint,17,opt,name=combo,proto3" json:"combo,omitempty"`                                     // 是否為組合單
	Ts            int64                  `protobuf:"varint,18,opt,name=ts,proto3" json:"ts,omitempty"`                                           // 成交時間戳（納秒）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FutureDealReport) Reset() {
	*x = FutureDealReport{}
	mi := &file_mizar_stream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureDealReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureDealReport) ProtoMessage() {}

func (x *FutureDealReport) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureDealReport.ProtoReflect.Descriptor instead.
func (*FutureDealReport) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{3}
}

func (x *FutureDealReport) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *FutureDealReport) GetSeqno() string {
	if x != nil {
		return x.Seqno
	}
	return ""
}

func (x *FutureDealReport) GetOrdno() string {
	if x != nil {
		return x.Ordno
	}
	return ""
}

func (x *FutureDealReport) GetExchangeSeq() string {
	if x != nil {
		return x.ExchangeSeq
	}
	return ""
}

func (x *FutureDealReport) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *FutureDealReport) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FutureDealReport) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *FutureDealReport) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureDealReport) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FutureDealReport) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *FutureDealReport) GetSubaccount() string {
	if x != nil {
		return x.Subaccount
	}
	return ""
}

func (x *FutureDealReport) GetSecurityType() string {
	if x != nil {
		return x.SecurityType
	}
	return ""
}

func (x *FutureDealReport) GetDeliveryMonth() string {
	if x != nil {
		return x.DeliveryMonth
	}
	return ""
}

func (x *FutureDealReport) GetStrikePrice() float64 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *FutureDealReport) GetOptionRight() string {
	if x != nil {
		return x.OptionRight
	}
	return ""
}

func (x *FutureDealReport) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *FutureDealReport) GetCombo() bool {
	if x != nil {
		return x.Combo
	}
	return false
}

func (x *FutureDealReport) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

// 股票 TICK 資料
type StockTick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                     // 商品代碼（如：2330）
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                 // 商品符號（如：2330）
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // TICK 時間戳（納秒）
	Price         float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                                 // 成交價
	Volume        int64                  `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`                                // 成交量
	BidPrice      float64                `protobuf:"fixed64,6,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`           // 買價
	BidVolume     int64                  `protobuf:"varint,7,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`         // 買量
	AskPrice      float64                `protobuf:"fixed64,8,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`           // 賣價
	AskVolume     int64                  `protobuf:"varint,9,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`         // 賣量
	OpenPrice     float64                `protobuf:"fixed64,10,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`       // 開盤價
	HighPrice     float64                `protobuf:"fixed64,11,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`       // 最高價
	LowPrice      float64                `protobuf:"fixed64,12,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`          // 最低價
	ClosePrice    float64                `protobuf:"fixed64,13,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`    // 收盤價
	TotalVolume   int64                  `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`  // 總成交量
	TotalAmount   float64                `protobuf:"fixed64,15,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // 總成交金額
	TickCount     int64                  `protobuf:"varint,16,opt,name=tick_count,json=tickCount,proto3" json:"tick_count,omitempty"`        // TICK 計數
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StockTick) Reset() {
	*x = StockTick{}
	mi := &file_mizar_stream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StockTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTick) ProtoMessage() {}

func (x *StockTick) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTick.ProtoReflect.Descriptor instead.
func (*StockTick) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{4}
}

func (x *StockTick) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockTick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockTick) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockTick) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockTick) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockTick) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *StockTick) GetBidVolume() int64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *StockTick) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *StockTick) GetAskVolume() int64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *StockTick) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *StockTick) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *StockTick) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *StockTick) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *StockTick) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockTick) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *StockTick) GetTickCount() int64 {
	if x != nil {
		return x.TickCount
	}
	return 0
}

// 股票買賣價量資料
type StockBidAsk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                         // 商品代碼（如：2330）
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                     // 商品符號（如：2330）
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // 時間戳（納秒）
	BidPrice      []float64              `protobuf:"fixed64,4,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`        // 買價陣列（5檔）
	BidVolume     []int64                `protobuf:"varint,5,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`      // 買量陣列（5檔）
	DiffBidVol    []int64                `protobuf:"varint,6,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"` // 買價增減量陣列（5檔）
	AskPrice      []float64              `protobuf:"fixed64,7,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`        // 賣價陣列（5檔）
	AskVolume     []int64                `protobuf:"varint,8,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`      // 賣量陣列（5檔）
	DiffAskVol    []int64                `protobuf:"varint,9,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"` // 賣價增減量陣列（5檔）
	Suspend       bool                   `protobuf:"varint,10,opt,name=suspend,proto3" json:"suspend,omitempty"`                                 // 暫停交易
	Simtrade      bool                   `protobuf:"varint,11,opt,name=simtrade,proto3" json:"simtrade,omitempty"`                               // 試撮
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StockBidAsk) Reset() {
	*x = StockBidAsk{}
	mi := &file_mizar_stream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StockBidAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockBidAsk) ProtoMessage() {}

func (x *StockBidAsk) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockBidAsk.ProtoReflect.Descriptor instead.
func (*StockBidAsk) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{5}
}

func (x *StockBidAsk) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockBidAsk) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockBidAsk) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockBidAsk) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *StockBidAsk) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *StockBidAsk) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *StockBidAsk) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *StockBidAsk) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *StockBidAsk) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *StockBidAsk) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *StockBidAsk) GetSimtrade() bool {
	if x != nil {
		return x.Simtrade
	}
	return false
}

// 期貨 TICK 資料
type FutureTick struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Code            string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                                      // 商品代碼（如：TXFG4）
	Symbol          string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                  // 商品符號（如：TXF202402）
	Timestamp       int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                           // TICK 時間戳（納秒）
	Price           float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                                                  // 成交價
	Volume          int64                  `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`                                                 // 成交量（口）
	UnderlyingPrice float64                `protobuf:"fixed64,6,opt,name=underlying_price,json=underlyingPrice,proto3" json:"underlying_price,omitempty"`       // 標的物價格
	BidSideTotalVol int64                  `protobuf:"varint,7,opt,name=bid_side_total_vol,json=bidSideTotalVol,proto3" json:"bid_side_total_vol,omitempty"`    // 買盤成交總量（口）
	AskSideTotalVol int64                  `protobuf:"varint,8,opt,name=ask_side_total_vol,json=askSideTotalVol,proto3" json:"ask_side_total_vol,omitempty"`    // 賣盤成交總量（口）
	AvgPrice        float64                `protobuf:"fixed64,9,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`                            // 均價
	OpenPrice       float64                `protobuf:"fixed64,10,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`                        // 開盤價
	HighPrice       float64                `protobuf:"fixed64,11,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`                        // 最高價
	LowPrice        float64                `protobuf:"fixed64,12,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`                           // 最低價
	TotalAmount     float64                `protobuf:"fixed64,13,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`                  // 總成交額
	TotalVolume     int64                  `protobuf:"varint,14,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`                   // 總成交量（口）
	TickType        TickType               `protobuf:"varint,15,opt,name=tick_type,json=tickType,proto3,enum=mizar.common.TickType" json:"tick_type,omitempty"` // 內外盤別
	ChgType         ChangeType             `protobuf:"varint,16,opt,name=chg_type,json=chgType,proto3,enum=mizar.common.ChangeType" json:"chg_type,omitempty"`  // 漲跌註記
	PriceChg        float64                `protobuf:"fixed64,17,opt,name=price_chg,json=priceChg,proto3" json:"price_chg,omitempty"`                           // 漲跌
	PctChg          float64                `protobuf:"fixed64,18,opt,name=pct_chg,json=pctChg,proto3" json:"pct_chg,omitempty"`                                 // 漲跌幅（%）
	Simtrade        SimTradeType           `protobuf:"varint,19,opt,name=simtrade,proto3,enum=mizar.common.SimTradeType" json:"simtrade,omitempty"`             // 試撮狀態
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FutureTick) Reset() {
	*x = FutureTick{}
	mi := &file_mizar_stream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureTick) ProtoMessage() {}

func (x *FutureTick) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureTick.ProtoReflect.Descriptor instead.
func (*FutureTick) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{6}
}

func (x *FutureTick) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureTick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FutureTick) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FutureTick) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FutureTick) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FutureTick) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *FutureTick) GetBidSideTotalVol() int64 {
	if x != nil {
		return x.BidSideTotalVol
	}
	return 0
}

func (x *FutureTick) GetAskSideTotalVol() int64 {
	if x != nil {
		return x.AskSideTotalVol
	}
	return 0
}

func (x *FutureTick) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *FutureTick) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *FutureTick) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *FutureTick) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *FutureTick) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *FutureTick) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *FutureTick) GetTickType() TickType {
	if x != nil {
		return x.TickType
	}
	return TickType_TICK_TYPE_UNKNOWN
}

func (x *FutureTick) GetChgType() ChangeType {
	if x != nil {
		return x.ChgType
	}
	return ChangeType_CHANGE_TYPE_UNKNOWN
}

func (x *FutureTick) GetPriceChg() float64 {
	if x != nil {
		return x.PriceChg
	}
	return 0
}

func (x *FutureTick) GetPctChg() float64 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *FutureTick) GetSimtrade() SimTradeType {
	if x != nil {
		return x.Simtrade
	}
	return SimTradeType_SIM_TRADE_TYPE_NORMAL
}

// 期貨買賣價量資料
type FutureBidAsk struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Code                 string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                                                    // 商品代碼（如：TXFG4）
	Symbol               string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                // 商品符號（如：TXF202402）
	Timestamp            int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                         // 時間戳（納秒）
	BidTotalVol          int64                  `protobuf:"varint,4,opt,name=bid_total_vol,json=bidTotalVol,proto3" json:"bid_total_vol,omitempty"`                                // 買盤總量（口）
	AskTotalVol          int64                  `protobuf:"varint,5,opt,name=ask_total_vol,json=askTotalVol,proto3" json:"ask_total_vol,omitempty"`                                // 賣盤總量（口）
	BidPrice             []float64              `protobuf:"fixed64,6,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`                                   // 買價陣列（5檔）
	BidVolume            []int64                `protobuf:"varint,7,rep,packed,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`                                 // 買量陣列（5檔）
	DiffBidVol           []int64                `protobuf:"varint,8,rep,packed,name=diff_bid_vol,json=diffBidVol,proto3" json:"diff_bid_vol,omitempty"`                            // 買價增減量陣列（5檔）
	AskPrice             []float64              `protobuf:"fixed64,9,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`                                   // 賣價陣列（5檔）
	AskVolume            []int64                `protobuf:"varint,10,rep,packed,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"`                                // 賣量陣列（5檔）
	DiffAskVol           []int64                `protobuf:"varint,11,rep,packed,name=diff_ask_vol,json=diffAskVol,proto3" json:"diff_ask_vol,omitempty"`                           // 賣價增減量陣列（5檔）
	FirstDerivedBidPrice float64                `protobuf:"fixed64,12,opt,name=first_derived_bid_price,json=firstDerivedBidPrice,proto3" json:"first_derived_bid_price,omitempty"` // 衍生一檔委買價
	FirstDerivedBidVol   int64                  `protobuf:"varint,13,opt,name=first_derived_bid_vol,json=firstDerivedBidVol,proto3" json:"first_derived_bid_vol,omitempty"`        // 衍生一檔委買量
	FirstDerivedAskPrice float64                `protobuf:"fixed64,14,opt,name=first_derived_ask_price,json=firstDerivedAskPrice,proto3" json:"first_derived_ask_price,omitempty"` // 衍生一檔委賣價
	FirstDerivedAskVol   int64                  `protobuf:"varint,15,opt,name=first_derived_ask_vol,json=firstDerivedAskVol,proto3" json:"first_derived_ask_vol,omitempty"`        // 衍生一檔委賣量
	UnderlyingPrice      float64                `protobuf:"fixed64,16,opt,name=underlying_price,json=underlyingPrice,proto3" json:"underlying_price,omitempty"`                    // 標的物價格
	Simtrade             SimTradeType           `protobuf:"varint,17,opt,name=simtrade,proto3,enum=mizar.common.SimTradeType" json:"simtrade,omitempty"`                           // 試撮狀態
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FutureBidAsk) Reset() {
	*x = FutureBidAsk{}
	mi := &file_mizar_stream_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureBidAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureBidAsk) ProtoMessage() {}

func (x *FutureBidAsk) ProtoReflect() protoreflect.Message {
	mi := &file_mizar_stream_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureBidAsk.ProtoReflect.Descriptor instead.
func (*FutureBidAsk) Descriptor() ([]byte, []int) {
	return file_mizar_stream_proto_rawDescGZIP(), []int{7}
}

func (x *FutureBidAsk) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureBidAsk) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FutureBidAsk) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FutureBidAsk) GetBidTotalVol() int64 {
	if x != nil {
		return x.BidTotalVol
	}
	return 0
}

func (x *FutureBidAsk) GetAskTotalVol() int64 {
	if x != nil {
		return x.AskTotalVol
	}
	return 0
}

func (x *FutureBidAsk) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *FutureBidAsk) GetBidVolume() []int64 {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *FutureBidAsk) GetDiffBidVol() []int64 {
	if x != nil {
		return x.DiffBidVol
	}
	return nil
}

func (x *FutureBidAsk) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *FutureBidAsk) GetAskVolume() []int64 {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *FutureBidAsk) GetDiffAskVol() []int64 {
	if x != nil {
		return x.DiffAskVol
	}
	return nil
}

func (x *FutureBidAsk) GetFirstDerivedBidPrice() float64 {
	if x != nil {
		return x.FirstDerivedBidPrice
	}
	return 0
}

func (x *FutureBidAsk) GetFirstDerivedBidVol() int64 {
	if x != nil {
		return x.FirstDerivedBidVol
	}
	return 0
}

func (x *FutureBidAsk) GetFirstDerivedAskPrice() float64 {
	if x != nil {
		return x.FirstDerivedAskPrice
	}
	return 0
}

func (x *FutureBidAsk) GetFirstDerivedAskVol() int64 {
	if x != nil {
		return x.FirstDerivedAskVol
	}
	return 0
}

func (x *FutureBidAsk) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *FutureBidAsk) GetSimtrade() SimTradeType {
	if x != nil {
		return x.Simtrade
	}
	return SimTradeType_SIM_TRADE_TYPE_NORMAL
}

var File_mizar_stream_proto protoreflect.FileDescriptor

const file_mizar_stream_proto_rawDesc = "" +
	"\n" +
	"\x12mizar_stream.proto\x12\fmizar.stream\x1a\x12mizar_common.proto\"\xaf\x01\n" +
	"\vSystemEvent\x126\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2\x17.mizar.stream.EventTypeR\teventType\x12\x1d\n" +
	"\n" +
	"event_name\x18\x02 \x01(\tR\teventName\x12+\n" +
	"\x11event_description\x18\x03 \x01(\tR\x10eventDescription\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"T\n" +
	"\tOperation\x12\x17\n" +
	"\aop_type\x18\x01 \x01(\tR\x06opType\x12\x17\n" +
	"\aop_code\x18\x02 \x01(\tR\x06opCode\x12\x15\n" +
	"\x06op_msg\x18\x03 \x01(\tR\x05opMsg\"u\n" +
	"\x11FutureOrderReport\x125\n" +
	"\toperation\x18\x01 \x01(\v2\x17.mizar.stream.OperationR\toperation\x12)\n" +
	"\x05trade\x18\x02 \x01(\v2\x13.mizar.common.TradeR\x05trade\"\x8f\x04\n" +
	"\x10FutureDealReport\x12\x19\n" +
	"\btrade_id\x18\x01 \x01(\tR\atradeId\x12\x14\n" +
	"\x05seqno\x18\x02 \x01(\tR\x05seqno\x12\x14\n" +
	"\x05ordno\x18\x03 \x01(\tR\x05ordno\x12!\n" +
	"\fexchange_seq\x18\x04 \x01(\tR\vexchangeSeq\x12\x1b\n" +
	"\tbroker_id\x18\x05 \x01(\tR\bbrokerId\x12\x1d\n" +
	"\n" +
	"account_id\x18\x06 \x01(\tR\taccountId\x12\x16\n" +
	"\x06action\x18\a \x01(\tR\x06action\x12\x12\n" +
	"\x04code\x18\b \x01(\tR\x04code\x12\x14\n" +
	"\x05price\x18\t \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\n" +
	" \x01(\x03R\bquantity\x12\x1e\n" +
	"\n" +
	"subaccount\x18\v \x01(\tR\n" +
	"subaccount\x12#\n" +
	"\rsecurity_type\x18\f \x01(\tR\fsecurityType\x12%\n" +
	"\x0edelivery_month\x18\r \x01(\tR\rdeliveryMonth\x12!\n" +
	"\fstrike_price\x18\x0e \x01(\x01R\vstrikePrice\x12!\n" +
	"\foption_right\x18\x0f \x01(\tR\voptionRight\x12\x1f\n" +
	"\vmarket_type\x18\x10 \x01(\tR\n" +
	"marketType\x12\x14\n" +
	"\x05combo\x18\x11 \x01(\bR\x05combo\x12\x0e\n" +
	"\x02ts\x18\x12 \x01(\x03R\x02ts\"\xdc\x03\n" +
	"\tStockTick\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x14\n" +
	"\x05price\x18\x04 \x01(\x01R\x05price\x12\x16\n" +
	"\x06volume\x18\x05 \x01(\x03R\x06volume\x12\x1b\n" +
	"\tbid_price\x18\x06 \x01(\x01R\bbidPrice\x12\x1d\n" +
	"\n" +
	"bid_volume\x18\a \x01(\x03R\tbidVolume\x12\x1b\n" +
	"\task_price\x18\b \x01(\x01R\baskPrice\x12\x1d\n" +
	"\n" +
	"ask_volume\x18\t \x01(\x03R\taskVolume\x12\x1d\n" +
	"\n" +
	"open_price\x18\n" +
	" \x01(\x01R\topenPrice\x12\x1d\n" +
	"\n" +
	"high_price\x18\v \x01(\x01R\thighPrice\x12\x1b\n" +
	"\tlow_price\x18\f \x01(\x01R\blowPrice\x12\x1f\n" +
	"\vclose_price\x18\r \x01(\x01R\n" +
	"closePrice\x12!\n" +
	"\ftotal_volume\x18\x0e \x01(\x03R\vtotalVolume\x12!\n" +
	"\ftotal_amount\x18\x0f \x01(\x01R\vtotalAmount\x12\x1d\n" +
	"\n" +
	"tick_count\x18\x10 \x01(\x03R\ttickCount\"\xc9\x02\n" +
	"\vStockBidAsk\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x1b\n" +
	"\tbid_price\x18\x04 \x03(\x01R\bbidPrice\x12\x1d\n" +
	"\n" +
	"bid_volume\x18\x05 \x03(\x03R\tbidVolume\x12 \n" +
	"\fdiff_bid_vol\x18\x06 \x03(\x03R\n" +
	"diffBidVol\x12\x1b\n" +
	"\task_price\x18\a \x03(\x01R\baskPrice\x12\x1d\n" +
	"\n" +
	"ask_volume\x18\b \x03(\x03R\taskVolume\x12 \n" +
	"\fdiff_ask_vol\x18\t \x03(\x03R\n" +
	"diffAskVol\x12\x18\n" +
	"\asuspend\x18\n" +
	" \x01(\bR\asuspend\x12\x1a\n" +
	"\bsimtrade\x18\v \x01(\bR\bsimtrade\"\x9f\x05\n" +
	"\n" +
	"FutureTick\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x14\n" +
	"\x05price\x18\x04 \x01(\x01R\x05price\x12\x16\n" +
	"\x06volume\x18\x05 \x01(\x03R\x06volume\x12)\n" +
	"\x10underlying_price\x18\x06 \x01(\x01R\x0funderlyingPrice\x12+\n" +
	"\x12bid_side_total_vol\x18\a \x01(\x03R\x0fbidSideTotalVol\x12+\n" +
	"\x12ask_side_total_vol\x18\b \x01(\x03R\x0faskSideTotalVol\x12\x1b\n" +
	"\tavg_price\x18\t \x01(\x01R\bavgPrice\x12\x1d\n" +
	"\n" +
	"open_price\x18\n" +
	" \x01(\x01R\topenPrice\x12\x1d\n" +
	"\n" +
	"high_price\x18\v \x01(\x01R\thighPrice\x12\x1b\n" +
	"\tlow_price\x18\f \x01(\x01R\blowPrice\x12!\n" +
	"\ftotal_amount\x18\r \x01(\x01R\vtotalAmount\x12!\n" +
	"\ftotal_volume\x18\x0e \x01(\x03R\vtotalVolume\x123\n" +
	"\ttick_type\x18\x0f \x01(\x0e2\x16.mizar.common.TickTypeR\btickType\x123\n" +
	"\bchg_type\x18\x10 \x01(\x0e2\x18.mizar.common.ChangeTypeR\achgType\x12\x1b\n" +
	"\tprice_chg\x18\x11 \x01(\x01R\bpriceChg\x12\x17\n" +
	"\apct_chg\x18\x12 \x01(\x01R\x06pctChg\x126\n" +
	"\bsimtrade\x18\x13 \x01(\x0e2\x1a.mizar.common.SimTradeTypeR\bsimtrade\"\x93\x05\n" +
	"\fFutureBidAsk\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\"\n" +
	"\rbid_total_vol\x18\x04 \x01(\x03R\vbidTotalVol\x12\"\n" +
	"\rask_total_vol\x18\x05 \x01(\x03R\vaskTotalVol\x12\x1b\n" +
	"\tbid_price\x18\x06 \x03(\x01R\bbidPrice\x12\x1d\n" +
	"\n" +
	"bid_volume\x18\a \x03(\x03R\tbidVolume\x12 \n" +
	"\fdiff_bid_vol\x18\b \x03(\x03R\n" +
	"diffBidVol\x12\x1b\n" +
	"\task_price\x18\t \x03(\x01R\baskPrice\x12\x1d\n" +
	"\n" +
	"ask_volume\x18\n" +
	" \x03(\x03R\taskVolume\x12 \n" +
	"\fdiff_ask_vol\x18\v \x03(\x03R\n" +
	"diffAskVol\x125\n" +
	"\x17first_derived_bid_price\x18\f \x01(\x01R\x14firstDerivedBidPrice\x121\n" +
	"\x15first_derived_bid_vol\x18\r \x01(\x03R\x12firstDerivedBidVol\x125\n" +
	"\x17first_derived_ask_price\x18\x0e \x01(\x01R\x14firstDerivedAskPrice\x121\n" +
	"\x15first_derived_ask_vol\x18\x0f \x01(\x03R\x12firstDerivedAskVol\x12)\n" +
	"\x10underlying_price\x18\x10 \x01(\x01R\x0funderlyingPrice\x126\n" +
	"\bsimtrade\x18\x11 \x01(\x0e2\x1a.mizar.common.SimTradeTypeR\bsimtrade*O\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rEVENT_TYPE_UP\x10\x01\x12\x13\n" +
	"\x0fEVENT_TYPE_DOWN\x10\x02B*Z(github.com/mizar/mizar-proto/proto/mizarb\x06proto3"

var (
	file_mizar_stream_proto_rawDescOnce sync.Once
	file_mizar_stream_proto_rawDescData []byte
)

func file_mizar_stream_proto_rawDescGZIP() []byte {
	file_mizar_stream_proto_rawDescOnce.Do(func() {
		file_mizar_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mizar_stream_proto_rawDesc), len(file_mizar_stream_proto_rawDesc)))
	})
	return file_mizar_stream_proto_rawDescData
}

var file_mizar_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mizar_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mizar_stream_proto_goTypes = []any{
	(EventType)(0),            // 0: mizar.stream.EventType
	(*SystemEvent)(nil),       // 1: mizar.stream.SystemEvent
	(*Operation)(nil),         // 2: mizar.stream.Operation
	(*FutureOrderReport)(nil), // 3: mizar.stream.FutureOrderReport
	(*FutureDealReport)(nil),  // 4: mizar.stream.FutureDealReport
	(*StockTick)(nil),         // 5: mizar.stream.StockTick
	(*StockBidAsk)(nil),       // 6: mizar.stream.StockBidAsk
	(*FutureTick)(nil),        // 7: mizar.stream.FutureTick
	(*FutureBidAsk)(nil),      // 8: mizar.stream.FutureBidAsk
	(*Trade)(nil),             // 9: mizar.common.Trade
	(TickType)(0),             // 10: mizar.common.TickType
	(ChangeType)(0),           // 11: mizar.common.ChangeType
	(SimTradeType)(0),         // 12: mizar.common.SimTradeType
}
var file_mizar_stream_proto_depIdxs = []int32{
	0,  // 0: mizar.stream.SystemEvent.event_type:type_name -> mizar.stream.EventType
	2,  // 1: mizar.stream.FutureOrderReport.operation:type_name -> mizar.stream.Operation
	9,  // 2: mizar.stream.FutureOrderReport.trade:type_name -> mizar.common.Trade
	10, // 3: mizar.stream.FutureTick.tick_type:type_name -> mizar.common.TickType
	11, // 4: mizar.stream.FutureTick.chg_type:type_name -> mizar.common.ChangeType
	12, // 5: mizar.stream.FutureTick.simtrade:type_name -> mizar.common.SimTradeType
	12, // 6: mizar.stream.FutureBidAsk.simtrade:type_name -> mizar.common.SimTradeType
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_mizar_stream_proto_init() }
func file_mizar_stream_proto_init() {
	if File_mizar_stream_proto != nil {
		return
	}
	file_mizar_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mizar_stream_proto_rawDesc), len(file_mizar_stream_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mizar_stream_proto_goTypes,
		DependencyIndexes: file_mizar_stream_proto_depIdxs,
		EnumInfos:         file_mizar_stream_proto_enumTypes,
		MessageInfos:      file_mizar_stream_proto_msgTypes,
	}.Build()
	File_mizar_stream_proto = out.File
	file_mizar_stream_proto_goTypes = nil
	file_mizar_stream_proto_depIdxs = nil
}
